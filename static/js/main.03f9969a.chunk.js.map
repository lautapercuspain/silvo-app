{"version":3,"sources":["img/silvo.jpg","Mouse.js","Cat.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Mouse","react_default","a","createElement","className","onMouseMove","this","props","mouse","state","render","React","Component","Cat","_this$props$state","x","y","Fragment","alt","src","silvo","style","position","left","top","width","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleMouseMove","event","console","log","setState","clientX","clientY","_this2","height","src_Mouse","src_Cat","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kPCczBC,mLARb,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,YAAaC,KAAKC,MAAMF,YAAaG,MAAOF,KAAKC,MAAME,OAC1EH,KAAKC,MAAMG,OAAOJ,KAAKG,eANRE,IAAMC,2BCiBXC,mLAfL,IAAAC,EACSR,KAAKC,MAAME,MAApBM,EADAD,EACAC,EAAGC,EADHF,EACGE,EACX,OACCf,EAAAC,EAAAC,cAACF,EAAAC,EAAMe,SAAP,KACChB,EAAAC,EAAAC,cAAA,OACCC,UAAU,2BACVc,IAAI,GACJC,IAAKC,IACLC,MAAO,CAAEC,SAAU,WAAYC,KAAMR,EAAGS,IAAKR,EAAGS,MAAM,mBATxCb,aCuBJc,2BAnBd,SAAAA,EAAYnB,GAAO,IAAAoB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAtB,KAAAoB,IAClBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA1B,KAAMC,KAIP0B,gBAAkB,SAACC,GAClBC,QAAQC,IAAI,2BAA4BF,GACxCP,EAAKU,SAAS,CACbtB,EAAGmB,EAAMI,QACTtB,EAAGkB,EAAMK,WAPVZ,EAAKlB,MAAQ,CAAEM,EAAG,EAAGC,EAAG,GAFNW,wEAYV,IAAAa,EAAAlC,KACR,OAAOL,EAAAC,EAAAC,cAAA,OAAKkB,MAAO,CAAEoB,OAAQ,QAAUpC,YAAaC,KAAK2B,iBAC/ChC,EAAAC,EAAAC,cAACuC,EAAD,CAAOrC,YAAaC,KAAK2B,gBAAiBvB,OAAQ,SAACF,GAAD,OAAWP,EAAAC,EAAAC,cAACwC,EAAD,CAAKnC,MAAOA,EAAOC,MAAO+B,EAAK/B,mBAftFG,cCMEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASvC,OAAOT,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.03f9969a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/silvo.c9a09ccf.jpg\";","import React from 'react';\n\nclass Mouse extends React.Component {\n\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\" onMouseMove={this.props.onMouseMove} mouse={this.props.state}>\n\t\t\t\t{this.props.render(this.state)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Mouse;\n","import React, { Component } from 'react';\nimport silvo from './img/silvo.jpg';\n\n class Cat extends Component {\n\trender() {\n\t\tconst { x, y } = this.props.state;\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<img\n\t\t\t\t\tclassName=\"animated wobble infinite\"\n\t\t\t\t\talt=\"\"\n\t\t\t\t\tsrc={silvo}\n\t\t\t\t\tstyle={{ position: 'absolute', left: x, top: y, width:'100px' }}\n\t\t\t\t/>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default Cat;","import React, { Component } from 'react';\nimport Mouse from './Mouse';\nimport Cat from './Cat';\nimport './App.css';\nimport './Animate.css';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { x: 0, y: 0 };\n\t}\n\n\thandleMouseMove = (event) => {\n\t\tconsole.log('Moving the mouse aroud::', event);\n\t\tthis.setState({\n\t\t\tx: event.clientX,\n\t\t\ty: event.clientY\n\t\t});\n\t};\n\trender() {\n\t\treturn <div style={{ height: '100%' }} onMouseMove={this.handleMouseMove}>\n\t\t         \t<Mouse onMouseMove={this.handleMouseMove} render={(mouse) => <Cat mouse={mouse} state={this.state} />} />\n\t\t\t</div>;\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}